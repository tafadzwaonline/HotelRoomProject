@page "/HotelRoom/Create"
@page "/HotelRoom/Edit/{Id:int}"
@page "/HotelRoom/Delete/{Id:int}"
@using Models
@using BusinessLayer.Repository.IRepository
@inject IHotelRoomRepository HotelRoomRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<div class="row mt-2 mb-5">
    
    <h3 class="card-title text-info mb-3 m-lg-3">@Title Hotel Room</h3>

    <div class="card">
        <div class="card-body">

            <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">

               <DataAnnotationsValidator/>
              @*  <ValidationSummary/>*@  @*This will display the validation summary at the top of the form*@
                <div class="form-group">
                    <label>Name</label>
                    <InputText class="form-control" @bind-Value="HotelRoomModel.Name" />
                    <ValidationMessage For="()=>HotelRoomModel.Name"></ValidationMessage>
                </div>
                 <div class="form-group">
                    <label>Occupancy</label>
                    <InputNumber class="form-control" @bind-Value="HotelRoomModel.Occupancy" />
                    <ValidationMessage For="()=>HotelRoomModel.Occupancy"></ValidationMessage>

                </div>
                <div class="form-group">
                    <label>Rate</label>
                    <InputNumber class="form-control" @bind-Value="HotelRoomModel.RegularRate" />
                    <ValidationMessage For="()=>HotelRoomModel.RegularRate"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Sq Ft</label>
                    <InputText class="form-control" @bind-Value="HotelRoomModel.SqFt" />
                    <ValidationMessage For="()=>HotelRoomModel.SqFt"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Details</label>
                    <InputTextArea class="form-control" @bind-Value="HotelRoomModel.Details" />
                    <ValidationMessage For="()=>HotelRoomModel.Details"></ValidationMessage>
                </div>
                <div class="form-group">
                    <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                </div>
                <div class="form-group">
                    <button class="btn btn-primary">@Title Room</button>
                    <NavLink href="HotelRoom" class="btn btn-secondary">Back To Index</NavLink>
                </div>
            </EditForm>
        </div>
    </div>
    
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();

    private string Title { get; set; } = "Create";

    protected override async Task OnInitializedAsync()
    {
        // return base.OnInitializedAsync();
        if (Id != null)  
        {
            //updating
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
        }
        else
        {
            //creating
            HotelRoomModel = new HotelRoomDTO();
        }

       
    }

    private async Task HandleImageUpload()
    {
        //var file = e.File;
        //var buffer = new byte[file.Size];
        //await file.OpenReadStream().ReadAsync(buffer);
        //HotelRoomModel.Picture = buffer;
        //HotelRoomModel.PictureName = file.Name;
        //HotelRoomModel.PictureContentType = file.ContentType;
    }
    private async Task HandleHotelRoomUpsert()
    {

        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);

            if (roomDetailsByName != null)
            {
                //There is a duplicate room name
                await JSRuntime.ToastrError("Room name already exists");

                return;

            }
            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                //update
                var updateroomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id,HotelRoomModel);
                await JSRuntime.ToastrSuccess("Room details updated successfully");

            }
            else if (HotelRoomModel.Id != 0 && Title == "Delete")
            {
                var DeleteroomResult = await HotelRoomRepository.DeleteHotelRoom(HotelRoomModel.Id);
                await JSRuntime.ToastrSuccess("Room deleted successfully");
            }
            else
            {
                //create
                var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await JSRuntime.ToastrSuccess("Room created successfully");
                
            }

            NavigationManager.NavigateTo("HotelRoom");

        }
        catch (Exception ex)
        {
            await JSRuntime.ToastrError($"{ex}");
        }
        
    }
}
